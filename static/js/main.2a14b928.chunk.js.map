{"version":3,"sources":["components/Form.js","components/Todo.js","components/TodoList.js","App.js","index.js"],"names":["Form","inputText","setInputText","todo","setTodo","setStatus","autoComplete","type","id","onChange","e","target","value","className","onClick","preventDefault","text","completed","uniqid","name","Todo","currentTodo","map","index","filter","TodoList","filterTodo","App","useState","status","setFilterTodo","useEffect","getLocalTodo","filterHandler","saveLocalTodo","localStorage","setItem","JSON","stringify","getItem","x","parse","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2a14b928.chunk.js","sourcesContent":["import uniqid from \"uniqid\";\n\nconst Form = ({ inputText, setInputText, todo, setTodo, setStatus }) => {\n  const inputHandler = (e) => {\n    setInputText(e.target.value);\n  };\n\n  const submitHandler = (e) => {\n    e.preventDefault();\n    setTodo([...todo, { text: inputText, completed: false, id: uniqid() }]);\n    setInputText(\"\");\n  };\n\n  const statusHandler = (e) => {\n    // console.log(e.target.value)\n    setStatus(e.target.value);\n  };\n\n  return (\n    <form autoComplete=\"off\">\n      <input type=\"text\" id=\"input\" onChange={inputHandler} value={inputText} />\n      <button className=\"submit\" type=\"submit\" onClick={submitHandler}>\n        Submit\n      </button>\n\n      <div className=\"select\">\n        <select id=\"filter-todos\" name=\"todos\" onClick={statusHandler}>\n          <option value=\"all\">ALL</option>\n          <option value=\"completed\">Completed</option>\n          <option value=\"uncompleted\">Uncompleted</option>\n        </select>\n      </div>\n    </form>\n  );\n};\n\nexport default Form;\n","const Todo = ({ text, todo, currentTodo, setTodo }) => {\n  //Events\n  const deletehandler = () => {\n    setTodo(\n      todo.filter((value, index) => {\n        return currentTodo.id !== value.id;\n      })\n    );\n  };\n\n  const completeHandler = () => {\n    setTodo(\n      todo.map((value, index) => {\n        if (currentTodo.id === value.id) {\n          return { ...value, completed: !currentTodo.completed };\n        } else {\n          return value;\n        }\n      })\n    );\n  };\n\n  return (\n    <div className=\"todo\">\n      <li className={`todo-item ${currentTodo.completed ? \"completed\" : \"\"}`}>\n        {text}\n      </li>\n      <button className=\"complete-btn\" onClick={completeHandler}>\n        check\n      </button>\n      <button className=\"trash-btn\" onClick={deletehandler}>\n        delete\n      </button>\n    </div>\n  );\n};\n\nexport default Todo;\n","import Todo from \"./Todo\";\n\nconst TodoList = ({ todo, setTodo, filterTodo }) => {\n  return (\n    <div className=\"todo-container\">\n      <ul className=\"todo-list\">\n        {filterTodo.map((value, index) => {\n          return (\n            <Todo\n              text={value.text}\n              key={value.id}\n              todo={todo}\n              currentTodo={value}\n              setTodo={setTodo}\n            />\n          );\n        })}\n      </ul>\n    </div>\n  );\n};\n\nexport default TodoList;\n","import { useState ,useEffect} from 'react'\nimport Form from './components/Form'\nimport TodoList from './components/TodoList';\n\nconst App=()=>{\n  \n  const [inputText, setInputText] = useState('');\n  const [todo, setTodo] = useState([]);\n  const [status, setStatus] = useState('all');\n  const [filterTodo, setFilterTodo] = useState([]);\n\n\n  useEffect(()=>{\n    getLocalTodo();\n  },[])\n\n  useEffect(()=>{\n    filterHandler();\n  },[status, todo]);\n\n  useEffect(()=>{\n    saveLocalTodo();\n  },[todo]);\n\n  const filterHandler = ()=>{\n    switch(status){\n      case 'completed': setFilterTodo(todo.filter(value => value.completed));\n      break;\n      case 'uncompleted': setFilterTodo(todo.filter(value => !value.completed));\n      break;\n      default: setFilterTodo(todo);\n      break;\n    }\n  }\n\n  const saveLocalTodo = ()=>{\n    localStorage.setItem('todo',JSON.stringify(todo));\n  }\n\n  const getLocalTodo=()=>{\n    if(localStorage.getItem('todo')!==null){\n      const x =JSON.parse(localStorage.getItem('todo'));\n      setTodo(x);\n    }\n  }\n\n  return(\n    \n    <div className='container'>\n      \n      <div className='App'>\n        <header>\n          <h1>Arvind's ToDo</h1>\n        </header>\n        \n        <Form \n          inputText = {inputText}\n          setInputText={setInputText} \n          todo = {todo}\n          setTodo={setTodo}\n          setStatus={setStatus}\n        />\n\n        <TodoList\n          todo={todo}\n          setTodo={setTodo}\n          filterTodo={filterTodo}\n        />\n\n      </div>\n    \n    </div>\n  )\n}\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport './App.css';\nimport './index.css';\n\nReactDOM.render(<App/>, document.getElementById('root'))"],"sourceRoot":""}